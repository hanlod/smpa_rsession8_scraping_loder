---
title: "R - Scraping Tables"
author: "NICAR via Jasmine Ye Han"
execute:
  echo: true
format:
  html:
    self-contained: true
    code-tools: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(rvest)


```


# Web scraping with R
This is a tutorial that serves as an intro to scraping with R using Rvest library. It walks through how to scrape a table of OSHA inspections, extract information based on italic style of the text, scrape hyperlinked tables. It also offers tips on how to deal with errors and avoid being blocked as a robot.

## A quick intro to webpage
Webpages usually consist of:

* HTML (HyperText Markup Language) files, which build structure of the page
* CSS (Cascading Style Sheet) files, which define the style or look of the page
* JavaScript files, which make the page interactive

An HTML file is a text file with HTML tags, which are reserved keywords for certain elements and they remind your your web browswer, "hey, here's a table/paragraph/list, please display it as a table/paragraph/list". And most tags must be in pairs, an opening tag and a closing tag, i.e. `<table></table>`, `<p></p>`, `<li></li>`.

These tags can have attributes such as:

* hyperlinks: `<a href='https://www.osha.gov/'>Occupational Safety and Health</a>`
* class: `<table class='table table-bordered'>`
* id: `<h1 id='myHeader'>Hello World!</h1>`

You can learn more about HTML tags [here](https://www.w3schools.com/tags/tag_comment.asp
)

## Inspect elements
An HTML document is like a tree and scraping data from it is like picking apples. You need to tell R which branches do you want the apples from, features of the branches, more ripened apples, without leaves etc. Tags and attributes help you target the branch we want apples from. To find the right tags and attributes we need to inspect the source code. 

Click [here](https://www.osha.gov/pls/imis/industry.search?sic=&sicgroup=&naicsgroup=&naics=492110&state=All&officetype=All&office=All&startmonth=12&startday=31&startyear=2019&endmonth=01&endday=01&endyear=2019&opt=&optt=&scope=&fedagncode=&owner=&emph=&emphtp=&p_start=&p_finish=0&p_sort=&p_desc=DESC&p_direction=Next&p_show=200) to visit the page we're going to scrape. Place your mouse on "Activity" column of the table in the middle, right click on the page and click "Inspect". "Elements" tab highlights where your mouse placed. "Sources" tab shows the entire html file.

If our apple is the data in `<table>` tag that's highlighted, it is on a `<table>` branch of the `<div>` branch, which is a branch of another `<div>`, which is, several layers of `<div>` branches later, a branch of the `<body>` branch of the HTML tree. Any branch or sub-branch of this tree can also be called a "node", and you will hear this word several times in this session.

## Now let's scrape a table!


This webpage has 161 osha citations in the messenger courier industry in 2019.

```{r}
#url of website to be scrapped
url <- "https://www.osha.gov/pls/imis/industry.search?sic=&sicgroup=&naicsgroup=&naics=492110&state=All&officetype=All&office=All&startmonth=12&startday=31&startyear=2019&endmonth=01&endday=01&endyear=2019&opt=&optt=&scope=&fedagncode=&owner=&emph=&emphtp=&p_start=&p_finish=0&p_sort=&p_desc=DESC&p_direction=Next&p_show=200"
```

## read_html(): read the webpage/html document into R
```{r}
#read the html content into R and assigns to webpage object
webpage <- read_html(url)
webpage
```
Tip: to find the right encoding, run "document.inputEncoding" in the console tab.

Character encoding is a method of converting bytes into characters. To validate or display an HTML document properly, a program must choose a proper character encoding. You can read more about in [this post](https://www.w3.org/International/questions/qa-what-is-encoding). 

## html_nodes(): select elements/nodes from the html

We can select certain elements in the html document, or "nodes", by picking out certain feature, like we talked about, picking which branches we want the apples from. We do that by passing on what is called "CSS selector" to the html_nodes() function. You can also pass on "Xpath" but we're not covering it today.

The following line is telling R to pull nodes or tree branches with "table" tags.

```{r}
html_nodes(webpage,"table")
```

You can also choose elements or tree branches based on attributes. Here we can find the value of class attribute of the `<table>` node/branch we want and pass that onto html_nodes() function. There are two tables with the same class attribute. The table we want is the second node in the returned nodeset.

```{r}
html_nodes(webpage,"[class='table table-bordered table-striped']")[[2]]
```

## html_table(): parse the table

After we get the node or the tree branch with that inspections table, we can parse it with html_table() function.

```{r}
inspections <- html_nodes(webpage,"[class='table table-bordered table-striped']")[[2]] %>% html_table()

inspections <- inspections[,-c(1:2)] ## remove the first two columns. one is empty, the other is useless.

head(inspections)
```

## Save the table
If you are happy with this table, you can save it locally as a csv file.
```{r}
#write.csv(inspections, "~/Desktop/nicar2020/nicar_2020_scraping_r/inspections.csv")
```

## Extract activity numbers with html_attr()
In the scraped table, Activity column don't have decimal places. Let's rescrape the complete activity numbers from the table and replace the Activity column. 

What CSS selector do we use to target the nodes/tree branches with activity numbers?

Inspect elements of those activity numbers, and you will realize they appear as the "title" attribute in the `<a>` tags, for example: 
`<a href="establishment.inspection_detail?id=1452519.015" title="1452519.015">`
(Yes, there can be multiple attributes for a tag.) 

`<a>` tags in HTML are reserved for hyperlinks, so we will want nodes with `<a>` tags for sure, but not all of them. 

Instead, we want `<a>` tags:
* in `<td>` tags, in other words, in a table cell
* in the third column of a table

To find these specific type of nodes/branches we need to understand two things.

First, ":nth-child(A)" selects the nth child element in another element. What appears before the colon defines the type of chile element and parent element. 

Go to level 18 of this interactive [CSS tutorial](http://flukeout.github.io/) and try the game after reading the examples on the right.

Now you will understand that "td:nth-child(3)" selects nodes in every third table cell in every table row on the page.

When you run the next code chunk you will find the first node isn't what we want. And we will fix it next.

```{r}
html_nodes(webpage, 'td:nth-child(3)') %>% head()
```

The second thing you need to understand, "A B" selects "all B inside of A". Go to level 4 of this interactive [tutorial](http://flukeout.github.io/) and try typing the answer, you will have a deeper understanding.

So "td:nth-child(3) a" selects nodes with `<a>` tags inside the data cells in the third column, and because the other table's third column data isn't hyperlinked and doesn't include `<a>` tags, it won't be selected.

I strongly recommend that you go through all 32 levels of this fun and interactive [CSS selector tutorial](http://flukeout.github.io/). [SelectorGaght Chrome extention](http://selectorgadget.com/) is also really useful in getting you started with scraping by finding the CSS selector based on your point and clicks.

Next save the activity numbers to a vector.
```{r}
act_num <- html_nodes(webpage, 'td:nth-child(3) a') %>% html_attr("title")
length(act_num) ## double check how many activity numbers
head(act_num) ## check out the first six
```

## Replace the Activity column with complete activity numbers
```{r}
# replace the Activity column with the act_num vector
inspections$Activity <- act_num
# check out the first six rows
head(inspections)
```

## Extract incomplete inspections based on italic style with html_text()

A piece of information is missing in the table above compared to the table on the webpage. A message on the page says "inspections which are known to be incomplete will have the identifying Activity Nr shown in italic". We want to include that information in our table too. 

Inspect elements and compare italic and non-italic numbers, we realize we need to target numbers wrapped in `<em>` tags. `<em>` in HTML means the text is displayed in italic. To avoid getting all `<em>` tags on the page, "td a em" only selects `<em>` tags inside `<a>` tags inside `<td>` tags, like we explained ealier.

```{r}
open_cases <- html_nodes(webpage,"td a em") %>%
  html_text()
length(open_cases)
head(open_cases)
```

## Create a new column for whether the case is incomplete

We can use ifelse function to create a new column that differentiate incomplete vs complete cases.

```{r}
inspections$status <- ifelse(inspections$Activity %in% open_cases, "incomplete", "complete")
inspections %>% head()
```

